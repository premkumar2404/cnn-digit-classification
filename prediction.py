# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1N2nUmsrJaEQrRboY6CrrD0bIkNmYnu
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from keras.datasets import mnist

# Load dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize
x_train = x_train / 255.0
x_test = x_test / 255.0

# Reshape for CNN
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# One-hot encoding
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Build CNN model
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

# Compile
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train
model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))

# Save model
model.save("model/mnist_cnn.h5")
print("Model saved to model/mnist_cnn.h5")

import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow import keras

# Load trained model
model = keras.models.load_model("model/mnist_cnn.h5")

# Ask for image path
file_path = input("Enter path of the digit image: ")

# Read & preprocess
img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (28, 28))
if np.mean(img) > 127:
    img = 255 - img  # Invert colors if background is white
img = img / 255.0
img = img.reshape(1, 28, 28, 1)

# Predict
prediction = model.predict(img)
predicted_label = np.argmax(prediction)
print(f"Predicted Digit: {predicted_label}")

# Show image
plt.imshow(img.reshape(28, 28), cmap='gray')
plt.title(f"Predicted: {predicted_label}")
plt.show()